sources:
  df:
    driver: csv
    args:
      urlpath: '{{ CATALOG_DIR }}/sample1.csv'
  df1:
    driver: csv
    args:
      urlpath: '{{ CATALOG_DIR }}/sample2_1.csv'
  df2:
    driver: csv
    args:
      urlpath: '{{ CATALOG_DIR }}/sample2_2.csv'

  error_iloc:
    driver: intake.source.derived.DataFramePipeline
    args:
      targets: [df]
      steps: [{method: iloc}]

  error_loc:
    driver: intake.source.derived.DataFramePipeline
    args:
      targets: [df]
      steps: [{method: loc}]

  one_column:
    driver: intake.source.derived.DataFramePipeline
    args:
      targets: [df]
      steps:
        - method: cols
          kwargs:
            columns: name

  two_columns:
    driver: intake.source.derived.DataFramePipeline
    args:
      targets: [df]
      steps:
        - method: cols
          kwargs:
            columns:
              - name
              - rank

  accessor:
    driver: intake.source.derived.DataFramePipeline
    args:
      targets: [df]
      steps:
        - method: cols
          kwargs:
            columns: name
        - method: str.lower

  failed:
    driver: intake.source.derived.DataFramePipeline
    args:
      targets: [df]
      steps:
        - method: cols
          kwargs: {columns: nope}

  assign:
    driver: intake.source.derived.DataFramePipeline
    args:
      targets: [df, accessor]
      steps:
        - method: assign
          kwargs:
            lower: accessor

  concat_rows:
    driver: intake.source.derived.DataFramePipeline
    args:
      targets: [df, df1]
      steps:
        - method: concat
          kwargs:
            dfs: [df, df1]

  concat_cols:
    driver: intake.source.derived.DataFramePipeline
    args:
      targets: [df, df1]
      steps:
        - method: concat
          kwargs:
            dfs: [df, df1]
            axis: columns

  merged:
    driver: intake.source.derived.DataFramePipeline
    args:
      targets: [df, df1]
      steps:
        - method: merge
          kwargs:
            right: df1
            "on": rank

  join1:
    driver: intake.source.derived.DataFramePipeline
    args:
      targets: [df, df1]
      steps:
        - method: join
          kwargs:
            other: df1
            rsuffix: 1

  join2:
    driver: intake.source.derived.DataFramePipeline
    args:
      targets: [df, df1, df2]
      steps:
        - method: join
          kwargs:
            other: [df1, df2]
            rsuffix: 2

  func:
    driver: intake.source.derived.DataFramePipeline
    args:
      targets: [df]
      steps:
        - method: cols
          kwargs: {columns: score}
        - method: intake.source.tests.util.zscore

  apply:
    driver: intake.source.derived.DataFramePipeline
    args:
      targets: [df]
      steps:
        - method: groupby
          kwargs:
            by: rank
        - method: cols
          kwargs:
            columns: name
        - method: apply
          kwargs:
            func: intake.source.tests.util.reverse
